#!/bin/bash
#
# This script runs the Jenkins server inside the Docker container.
# It copies the configuration and plugins from /opt/openshift/configuration to
# ${JENKINS_HOME}.
#
# It also sets the admin password to ${JENKINS_PASSWORD}.
#
source /usr/local/bin/jenkins-common.sh
source /usr/local/bin/kube-slave-common.sh

#NOTE:  periodically check https://ce-gitlab.usersys.redhat.com/ce/jboss-dockerfiles/blob/develop/scripts/os-java-run/added/java-default-options for updates

# NOTE on fabric8 this is going to be a readonly mount
# see: https://github.com/openshiftio/openshift.io/issues/2608
IMAGE_CONFIG_DIR="/opt/openshift/configuration"

# temp directory where template expansion and configs will be copied to before
# being copied to the $JENKINS_HOME
IMAGE_CONFIG_GEN_DIR=$(mktemp --dry-run -d -p "$JENKINS_HOME")

# file that holds the timestamp/signature of config files mounted through configmap
CONFIG_TIMESTAMP="${CONFIG_TIMESTAMP:-config-timestamp}"

log() {
  local level=$1; shift
  local datetime=$(date "+%b %d, %Y %r")
  echo "${datetime} ${level}: $*"
}

log_info() {
  log INFO "$@"
}

log_warn() {
  log WARN "$@"
}

config_changed() {
  # don't worry about configurations if there isn't a dir
  # but note that the image we are building already has the dir
  [ -d ${IMAGE_CONFIG_DIR} ] || return 1

  local img_config_timestamp="$IMAGE_CONFIG_DIR/$CONFIG_TIMESTAMP"

  # treat absense of timestamp in configmap as timestamp changed to be on the
  # safe side so that configuration files are generated
  [ -f "$img_config_timestamp" ] || return 0

  local our_timestamp="$JENKINS_HOME/$CONFIG_TIMESTAMP"
  touch -a "$our_timestamp"

  # return 0 if files are different
  [[ $(cmp -s "$img_config_timestamp" "$our_timestamp") != 0 ]]
}

generate_jenkins_config()  {
  local config_file="config.xml"
  local config_tpl_path="$IMAGE_CONFIG_DIR/$config_file.tpl"

  [ -f "$config_tpl_path" ] || {
    log_warn "Skipping generation of '$config_file' as $config_tpl_path is not found"
    return 0
  }

  # If it contains a template (tpl) file, we can do additional manipulations
  # to customize the configuration.
  export KUBERNETES_CONFIG=$(generate_kubernetes_config)

  for name in $(get_is_names); do
    log_info "... adding image ${name}:latest as Kubernetes slave"
  done
  log_info "Generating kubernetes-plugin configuration (${config_tpl_path})"
  envsubst < "$config_tpl_path" > "${IMAGE_CONFIG_GEN_DIR}/$config_file"
}

generate_credentials()  {
  local cred_file="credentials.xml"
  local cred_tpl_path="$IMAGE_CONFIG_DIR/$cred_file.tpl"

  [ -f "$cred_tpl_path" ] || {
    log_warn "Skipping generation of '$cred_file' as $config_tpl_path is not found"
    return 0
  }

  [ -z "${KUBERNETES_CONFIG}" ] && {
    log_warn "Skipping generaton of kubernetes-plugin credentials as KUBERNETES_CREDENTIALS is blank"
    return 0
  }

  log_info "Generating kubernetes-plugin credentials ($cred_file) ..."
  export KUBERNETES_CREDENTIALS=$(generate_kubernetes_credentials)

  # Fix the envsubst trying to substitute the $Hash inside credentials.xml
  export Hash="\$Hash"
  envsubst < "$cred_tpl_path" > "${IMAGE_CONFIG_GEN_DIR}/$cred_file"
}

copy_config_files() {
  log_info "Copying Jenkins configuration to $JENKINS_HOME"
  cp -frL "$IMAGE_CONFIG_DIR/"* "$JENKINS_HOME/"
  cp -frL "$IMAGE_CONFIG_GEN_DIR/"* "$JENKINS_HOME/"

  # we don't need the templates
  log_info "Removing template files (*.tpl) from $JENKINS_HOME"
  rm -f "$JENKINS_HOME/"*.tpl
}


generate_all_configs() {
  mkdir -p "$IMAGE_CONFIG_GEN_DIR"
  log_info "Using temp directory $IMAGE_CONFIG_GEN_DIR for generating configurations"
  generate_jenkins_config
  generate_credentials
  copy_config_files
  rm -fr "${IMAGE_CONFIG_GEN_DIR}"
  log_info "Removed temp directory $IMAGE_CONFIG_GEN_DIR"
}


#get the fully qualified paths to both 32 and 64 bit java
JVMPath32bit=`alternatives --display java | grep family | grep i386 | awk '{print $1}'`
JVMPath64bit=`alternatives --display java | grep family | grep x86_64 | awk '{print $1}'`

# set the java version used based on OPENSHIFT_JENKINS_JVM_ARCH
if [ -z $OPENSHIFT_JENKINS_JVM_ARCH  ]; then
    echo "Using 64 bit Java since OPENSHIFT_JENKINS_JVM_ARCH is not set (historic setting)"
    alternatives --set java $JVMPath64bit
elif [ "${OPENSHIFT_JENKINS_JVM_ARCH}" == "x86_64"  ]; then
    echo "64 bit Java explicitly set in OPENSHIFT_JENKINS_JVM_ARCH"
    alternatives --set java $JVMPath64bit
else
    echo "OPENSHIFT_JENKINS_JVM_ARCH is set to ${OPENSHIFT_JENKINS_JVM_ARCH} so using 32 bit Java"
    alternatives --set java $JVMPath32bit
fi


CONTAINER_MEMORY_IN_BYTES=`cat /sys/fs/cgroup/memory/memory.limit_in_bytes`
DEFAULT_MEMORY_CEILING=$((2**40-1))

if [ -z $MAX_METASPACE_SIZE ]; then
    MAX_METASPACE_SIZE=100m
fi

if [ "${CONTAINER_MEMORY_IN_BYTES}" -lt "${DEFAULT_MEMORY_CEILING}" ]; then

    if [ -z $CONTAINER_HEAP_PERCENT ]; then
        CONTAINER_HEAP_PERCENT=0.50
    fi

    CONTAINER_MEMORY_IN_MB=$((${CONTAINER_MEMORY_IN_BYTES}/1024**2))
    #if machine has 4GB or less, meaning max heap of 2GB given current default, force use of 32bit to save space unless user
    #specifically want to force 64bit
    HEAP_LIMIT_FOR_32BIT=$((2**32-1))
    HEAP_LIMIT_FOR_32BIT_IN_MB=$((${HEAP_LIMIT_FOR_32BIT}/1024**2))
    CONTAINER_HEAP_MAX=$(echo "${CONTAINER_MEMORY_IN_MB} ${CONTAINER_HEAP_PERCENT}" | awk '{ printf "%d", $1 * $2 }')
    if [[ -z $OPENSHIFT_JENKINS_JVM_ARCH && "${CONTAINER_HEAP_MAX}" -lt "${HEAP_LIMIT_FOR_32BIT_IN_MB}"  ]]; then
	echo "max heap in MB is ${CONTAINER_HEAP_MAX} and 64 bit was not explicitly set so using 32 bit Java"
	alternatives --set java $JVMPath32bit
    fi

    JAVA_MAX_HEAP_PARAM="-Xmx${CONTAINER_HEAP_MAX}m"
    if [ -z $CONTAINER_INITIAL_PERCENT ]; then
      CONTAINER_INITIAL_PERCENT=0.07
    fi
    CONTAINER_INITIAL_HEAP=$(echo "${CONTAINER_HEAP_MAX} ${CONTAINER_INITIAL_PERCENT}" | awk '{ printf "%d", $1 * $2 }')
    JAVA_INITIAL_HEAP_PARAM="-Xms${CONTAINER_INITIAL_HEAP}m"
fi

if [ -z "$JAVA_GC_OPTS" ]; then
    # We no longer set MaxMetaspaceSize because the JVM should expand metaspace until it reaches the container limit.
    # See http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/4dd24f4ca140/src/share/vm/memory/metaspace.cpp#l1470
    JAVA_GC_OPTS="-XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90"
fi

if [ ! -z "${USE_JAVA_DIAGNOSTICS}" ]; then
    JAVA_DIAGNOSTICS="-XX:NativeMemoryTracking=summary -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UnlockDiagnosticVMOptions"
fi

if [ ! -z "${CONTAINER_CORE_LIMIT}" ]; then
    JAVA_CORE_LIMIT="-XX:ParallelGCThreads=${CONTAINER_CORE_LIMIT} -Djava.util.concurrent.ForkJoinPool.common.parallelism=${CONTAINER_CORE_LIMT} -XX:CICompilerCount=2"
fi

if [ -z "${JAVA_OPTS}" ]; then
    JAVA_OPTS="-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dsun.zip.disableMemoryMapping=true"
fi

# Since OpenShift runs this Docker image under random user ID, we have to assign
# the 'jenkins' user name to this UID.
generate_passwd_file

rm -rf /tmp/war
mkdir /tmp/war
unzip -q /usr/lib/jenkins/jenkins.war -d /tmp/war
if [ -e ${JENKINS_HOME}/password ]; then
  old_salt=$(cat ${JENKINS_HOME}/password | sed 's/:.*//')
fi
new_password_hash=`obfuscate_password ${JENKINS_PASSWORD:-password} $old_salt`

# finish the move of the default logs dir, /var/log/jenkins, to the volume mount
mkdir -p ${JENKINS_HOME}/logs
ln -sf ${JENKINS_HOME}/logs /var/log/jenkins


# check if the configuration needs to be updated by comparing the timestamps
if config_changed; then
  generate_all_configs
fi


# If the INSTALL_PLUGINS variable is populated, then attempt to install
# those plugins before copying them over to JENKINS_HOME
# The format of the INSTALL_PLUGINS variable is a comma-separated list
# of pluginId:pluginVersion strings
if [[ -n "${INSTALL_PLUGINS:-}" ]]; then
  echo "Installing additional plugins: ${INSTALL_PLUGINS} ..."

  # Create a temporary file in the format of plugins.txt
  plugins_file=$(mktemp)
  IFS=',' read -ra plugins <<< "${INSTALL_PLUGINS}"
  for plugin in "${plugins[@]}"; do
      echo "${plugin}" >> "${plugins_file}"
  done

  # Call install plugins with the temporary file
  /usr/local/bin/install-plugins.sh "${plugins_file}"
fi

delete_plugins(){
  list_of_plugins=$(diff --brief /opt/openshift/plugins ${JENKINS_HOME}/plugins | grep 'Only in' | grep ${JENKINS_HOME}/plugins | awk '{print $4}')
  if [ ! -z "$list_of_plugins" ]; then
    for plugin in $list_of_plugins
    do
      if [ ! -d "$JENKINS_HOME/plugins/$plugin" ]; then
        echo "removing plugin: $plugin"
        base_plugin_name=$(echo "$plugin" | cut -d'.' -f 1)
        rm -rf $JENKINS_HOME/plugins/$base_plugin_name*
      fi
    done
  else
    echo "No plugins to be deleted"
  fi
}

copy_plugins() {
    echo "linking $(ls /opt/openshift/plugins | wc -l) Jenkins plugins to ${JENKINS_HOME} ..."
    ln -sf /opt/openshift/plugins ${JENKINS_HOME}/plugins
}

# version.txt is maintained to check if the plugins should be copied over or not
# The version.txt in this directory https://github.com/fabric8io/openshift-jenkins-s2i-config/tree/master/plugins
# should be updated when a plugin is updated
if [ "$(ls -A /opt/openshift/plugins 2>/dev/null)" ]; then
  mkdir -p ${JENKINS_HOME}/plugins
  # if empty then only copy the plugins
  if [ -z "$(ls -A ${JENKINS_HOME}/plugins)" ]; then
      echo "plugins directory not found copy plugins"
      copy_plugins
  else
    if [ ! -f ${JENKINS_HOME}/plugins/version.txt ]; then
      echo "version.txt not found copy plugins"
      copy_plugins
    else
      previous_version=$(<${JENKINS_HOME}/plugins/version.txt)
      echo "version.txt previous_version: $previous_version"
      new_version=$(</opt/openshift/plugins/version.txt)
      echo "version.txt new_version: $new_version"
      if [ $new_version -gt $previous_version ]; then
        echo "There is a new version of plugin, copy over plugins"
        copy_plugins
        delete_plugins
      else
        echo "skip copying plugins"
      fi
    fi
  fi
fi

echo "Creating initial Jenkins 'admin' user ..."
sed -i "s,<passwordHash>.*</passwordHash>,<passwordHash>$new_password_hash</passwordHash>,g" "${JENKINS_HOME}/users/admin/config.xml"
echo $new_password_hash > ${JENKINS_HOME}/password
touch ${JENKINS_HOME}/configured


if [ -e ${JENKINS_HOME}/password ]; then
  # if the password environment variable has changed, update the jenkins config.
  # we don't want to just blindly do this on startup because the user might change their password via
  # the jenkins ui, so we only want to do this if the env variable has been explicitly modified from
  # the original value.
  old_password_hash=`cat ${JENKINS_HOME}/password`
  if [ $old_password_hash != $new_password_hash ]; then
    echo "Detected password environment variable change, updating Jenkins configuration ..."
    sed -i "s,<passwordHash>.*</passwordHash>,<passwordHash>$new_password_hash</passwordHash>,g" "${JENKINS_HOME}/users/admin/config.xml"
    echo $new_password_hash > ${JENKINS_HOME}/password
  fi
fi


rm -rf /tmp/war

# default log rotation in /etc/logrotate.d/jenkins handles /var/log/jenkins/access_log
if [ ! -z "${OPENSHIFT_USE_ACCESS_LOG}" ]; then
    JENKINS_ACCESSLOG="--accessLoggerClassName=winstone.accesslog.SimpleAccessLogger --simpleAccessLogger.format=combined --simpleAccessLogger.file=/var/log/jenkins/access_log"
fi

# if `docker run` first argument start with `--` the user is passing jenkins launcher arguments
if [[ $# -lt 1 ]] || [[ "$1" == "--"* ]]; then
   exec java $JAVA_GC_OPTS $JAVA_INITIAL_HEAP_PARAM $JAVA_MAX_HEAP_PARAM -Duser.home=${HOME} $JAVA_CORE_LIMIT $JAVA_DIAGNOSTICS $JAVA_OPTS -Dfile.encoding=UTF8 -jar /usr/lib/jenkins/jenkins.war $JENKINS_OPTS $JENKINS_ACCESSLOG "$@"
fi

# As argument is not jenkins, assume user want to run his own process, for sample a `bash` shell to explore this image
exec "$@"
